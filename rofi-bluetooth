#!/usr/bin/env bash
#             __ _       _     _            _              _   _
#  _ __ ___  / _(_)     | |__ | |_   _  ___| |_ ___   ___ | |_| |__
# | '__/ _ \| |_| |_____| '_ \| | | | |/ _ \ __/ _ \ / _ \| __| '_ \
# | | | (_) |  _| |_____| |_) | | |_| |  __/ || (_) | (_) | |_| | | |
# |_|  \___/|_| |_|     |_.__/|_|\__,_|\___|\__\___/ \___/ \__|_| |_|
#
# This code was forked from https://github.com/nickclyde/rofi-bluetooth
#   hence all my further work on it continues under the original GPL license
#
# A script that generates a rofi menu that uses bluetoothctl to
# connect to bluetooth devices and display status info.
#

kb_restart="Control+r"
# toggle device, without submenu
kb_quick_connect="Control+Return"
# forget device, without submenu
kb_quick_forget="Alt+x"

goback="← back"

# Checks if bluetooth controller is powered on
power_on() { bluetoothctl show | grep -q "Powered: yes"; }
# returns a list of all bluetooth devices in a form of 'name' ⇨ 'mac'
get_devices() {
  bluetoothctl devices | awk '{
  mac = $2
  name = substr($0, index($0,$3))
  printf "%s <span alpha=\"50%\">⇨ %s</span>\n", name, mac
}'
}

toggle_power() {
  if power_on; then
    bluetoothctl power off
  else
    rfkill list bluetooth | grep -q 'blocked: yes' &&
      rfkill unblock bluetooth && sleep 3
    bluetoothctl power on
  fi
  show_menu
}

# Toggles scanning state
enable_scan() {
  say -t 5000 -e "Scanning for pairable bluetooth devices..."

  # solution source: https://bbs.archlinux.org/viewtopic.php?id=270044

  # device="00:1B:66:88:1D:52"

  expect <(
    cat <<EOF
spawn bluetoothctl
send -- "scan on\r"
sleep 5
send -- "exit\r"
expect eof
EOF
  )

  # set timeout 60
  # expect "$device"
  # send -- "pair $device\r"
  # expect "Pairing successful"
  # send -- "connect $device\r"
  # expect "Connection successful"
  # send -- "trust $device\r"
  # expect "trust succeeded"

  show_menu
}

pairable() {
  if bluetoothctl show | grep -q "Pairable: yes"; then
    echo "Pairable: on" && return 0
  else
    echo "Pairable: off" && return 1
  fi
}

toggle_pairable() {
  if pairable; then
    bluetoothctl pairable off
  else
    bluetoothctl pairable on
  fi
  show_menu
}

discoverable() {
  if bluetoothctl show | grep -q "Discoverable: yes"; then
    echo "Discoverable: on" && return 0
  else
    echo "Discoverable: off" && return 1
  fi
}

toggle_discoverable() {
  if discoverable; then
    bluetoothctl discoverable off
  else
    bluetoothctl discoverable on
  fi
  show_menu
}

device_connected() {
  if bluetoothctl info "$1" | grep -q "Connected: yes"; then
    echo "Connected: yes" && return 0
  else
    echo "Connected: no" && return 1
  fi
}

toggle_connection() {
  if device_connected "$1"; then
    bluetoothctl disconnect "$1"
  else
    bluetoothctl connect "$1"
  fi
}

device_paired() {
  device_info=$(bluetoothctl info "$1")
  if echo "$device_info" | grep -q "Paired: yes"; then
    echo "Paired: yes" && return 0
  else
    echo "Paired: no" && return 1
  fi
}

toggle_paired() {
  if device_paired "$1"; then
    bluetoothctl remove "$1"
  else
    bluetoothctl pair "$1"
  fi
  device_menu "$1" # passing mac
}

device_trusted() {
  device_info=$(bluetoothctl info "$1")
  if echo "$device_info" | grep -q "Trusted: yes"; then
    echo "Trusted: yes" && return 0
  else
    echo "Trusted: no" && return 1
  fi
}

toggle_trust() {
  if device_trusted "$1"; then
    bluetoothctl untrust "$1"
  else
    bluetoothctl trust "$1"
  fi
  device_menu "$1" # passing mac
}

get_device_mac() { echo "$1" | cut -d' ' -f 2; }

# NOTE: will break if there will be 2 devices with same name
get_device() { bluetoothctl devices | grep "$option"; }

# A submenu for a specific device that allows connecting, pairing, and trusting
device_menu() {
  mac="$1"

  local -a options

  # Build options
  connected="$(device_connected "$mac") ($kb_quick_connect)"
  paired="$(device_paired "$mac") ($kb_quick_forget)"
  trusted=$(device_trusted "$mac")
  options=("$connected" "$paired" "$trusted" "$goback")

  # Open rofi menu, read option
  option="$(printf '%s\n' "${options[@]}" | _rofi "$device_name")"
  [ "$?" -eq 1 ] && exit

  # Match option to command
  case "$option" in
    "") echo "No option chosen." ;;
    "$connected") toggle_connection "$mac" ;;
    "$paired") toggle_paired "$mac" ;;
    "$trusted") toggle_trust "$mac" ;;
    "$goback") show_menu ;;
  esac
}

# Opens a rofi menu with current bluetooth status and options to connect
show_menu() {
  local -a options
  local power
  local device # will be used in subsequent functions

  if power_on; then
    power="Power: on ($kb_restart to restart)"

    scan="Scan for devices"
    pairable=$(pairable)
    discoverable=$(discoverable)
    options=("$power" "$scan" "$pairable" "$discoverable")

    # Human-readable names of devices, one per line
    # If scan is off, will only list paired devices
    devices=$(get_devices)

    [ "$devices" ] && options+=("---" "$devices")
  else
    power="Power: off"
    options=("$power")
  fi

  option=$(printf '%s\n' "${options[@]}" | _rofi \
    -kb-custom-1 "$kb_restart" \
    -kb-accept-custom "" \
    -kb-custom-2 "$kb_quick_connect" \
    -kb-custom-3 "$kb_quick_forget")

  rofi_exit=$?

  [ "$rofi_exit" -eq 1 ] && exit

  case "$rofi_exit" in
    0)
      case "$option" in
        "$power") toggle_power ;;
        "$scan") enable_scan ;;
        "$discoverable") toggle_discoverable ;;
        "$pairable") toggle_pairable ;;
        *)
          # Open a submenu if a device is selected
          if get_device; then
            mac=$(get_device_mac "$(get_device)")
            case $rofi_exit in
              10) toggle_connection "$mac" ;;
              11) toggle_paired "$mac" ;;
              12) toggle_trust "$mac" ;;
              *) device_menu "$mac" ;;
            esac
          fi
          ;;
      esac
      ;;
    10)
      say "Restarting bluetooth"
      bluetoothctl power off
      bluetoothctl power on
      show_menu
      ;;
    11) get_device && toggle_connection "$(get_device_mac "$(get_device)")" ;;
    12) get_device && toggle_paired "$(get_device_mac "$(get_device)")" ;;
  esac
}

# Rofi command to pipe into, can add any options here
_rofi() { rofi -dmenu -markup-rows -i "$@"; }

show_menu
