#!/usr/bin/env bash
#             __ _       _     _            _              _   _
#  _ __ ___  / _(_)     | |__ | |_   _  ___| |_ ___   ___ | |_| |__
# | '__/ _ \| |_| |_____| '_ \| | | | |/ _ \ __/ _ \ / _ \| __| '_ \
# | | | (_) |  _| |_____| |_) | | |_| |  __/ || (_) | (_) | |_| | | |
# |_|  \___/|_| |_|     |_.__/|_|\__,_|\___|\__\___/ \___/ \__|_| |_|
#
# This code was forked from https://github.com/nickclyde/rofi-bluetooth
#   hence all my further work on it continues under the original GPL license
#
# A script that generates a rofi menu that uses bluetoothctl to
# connect to bluetooth devices and display status info.
#

###############################################################################
#                                Configurables                                #
###############################################################################

kb_restart="Control+r"
# toggle device, without submenu
kb_quick_connect="Control+Return"
# forget device, without submenu
kb_quick_forget="Alt+x"

goback="← back"

# Whatever notify logic you want to use.
# On my system i have a script called 'say'
_notify() { say "$@"; }

###############################################################################
#                               Main menu logic                                #
###############################################################################

# Checks if bluetooth controller is powered on
is_bt_on() { bluetoothctl show | grep -q "Powered: yes"; }

# returns a list of all bluetooth devices in a form of 'name' ⇨ 'mac'
get_devices() {
  bluetoothctl devices | awk '{
    mac = $2
    name = substr($0, index($0,$3))
    printf "%s <span alpha=\"50%\">⇨ %s</span>\n", name, mac
  }'
}

toggle_power() {
  if is_bt_on; then
    bluetoothctl power off
  else
    rfkill list bluetooth | grep -q 'blocked: yes' &&
      rfkill unblock bluetooth && sleep 3
    bluetoothctl power on
  fi
  show_menu
}

restart_bt() {
  _notify "Restarting bluetooth"
  bluetoothctl power off
  bluetoothctl power on
  show_menu
}

# Toggles scanning state
enable_scan() {
  _notify -t 5000 -e "Scanning for pairable bluetooth devices..."

  # solution source: https://gist.github.com/RamonGilabert/046727b302b4d9fb0055
  # https://www.geeksforgeeks.org/coproc-command-in-linux-with-examples/
  coproc ubt { bluetoothctl; } # echo "$ubt_PID"
  _bt() { echo -e $@ >&"${ubt[1]}"; }
  _bt agent on

  _bt scan on
  sleep 3
  _bt exit

  show_menu
}

pairable() {
  if bluetoothctl show | grep -q "Pairable: yes"; then
    echo "Pairable: on" && return 0
  else
    echo "Pairable: off" && return 1
  fi
}

toggle_pairable() {
  if pairable; then
    bluetoothctl pairable off
  else
    bluetoothctl pairable on
  fi
  show_menu
}

discoverable() {
  if bluetoothctl show | grep -q "Discoverable: yes"; then
    echo "Discoverable: on" && return 0
  else
    echo "Discoverable: off" && return 1
  fi
}

toggle_discoverable() {
  if discoverable; then
    bluetoothctl discoverable off
  else
    bluetoothctl discoverable on
  fi
  show_menu
}

###############################################################################
#                             Device submenu logic                            #
###############################################################################

is_connected() {
  mac="$1"
  if bluetoothctl info "$mac" | grep -q "Connected: yes"; then
    echo "Connected: yes" && return 0
  else
    echo "Connected: no" && return 1
  fi
}

toggle_connection() {
  mac="$1"
  if is_connected "$mac"; then
    bluetoothctl disconnect "$mac"
  else
    bluetoothctl connect "$mac"
  fi
}

is_paired() {
  mac="$1"
  if bluetoothctl info "$mac" | grep -q "Paired: yes"; then
    echo "Paired: yes" && return 0
  else
    echo "Paired: no" && return 1
  fi
}

toggle_paired() {
  mac="$1"
  if is_paired "$mac"; then
    bluetoothctl remove "$mac"
  else
    # connect because some devices like to disconnect after pairing
    bluetoothctl pair "$mac" && bluetoothctl connect "$mac"
  fi
}

device_trusted() {
  mac="$1"
  if bluetoothctl info "$mac" | grep -q "Trusted: yes"; then
    echo "Trusted: yes" && return 0
  else
    echo "Trusted: no" && return 1
  fi
}

toggle_trust() {
  mac="$1"
  if device_trusted "$mac"; then
    bluetoothctl untrust "$mac"
  else
    bluetoothctl trust "$mac"
  fi
}

###############################################################################
#                               Helper functions                              #
###############################################################################

get_mac() { expr "$1" : '.*⇨ \([0-9A-F:]*\)'; }

# checks that passed line contains mac address of a bluetooth device
is_device() { echo "$1" | grep -qP '([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}'; }

###############################################################################
#                                 Menus logic                                 #
###############################################################################

# A submenu for a specific device that allows connecting, pairing, and trusting
device_menu() { # receives user chosen line as is with no changes
  local device_info="$1"
  local mac
  mac="$(get_mac "$1")"

  local -a options

  options=("$device_info")
  if is_paired "$mac"; then
    connected="$(is_connected "$mac") ($kb_quick_connect)"
    options+=("$connected")
  fi
  paired="$(is_paired "$mac") ($kb_quick_forget)"
  trusted=$(device_trusted "$mac")
  options+=("$paired" "$trusted" "$goback")

  option=$(printf '%s\n' "${options[@]}" |
    _rofi -selected-row 1 -kb-accept-custom "" \
      -kb-custom-1 "$kb_quick_connect" \
      -kb-custom-2 "$kb_quick_forget")
  rofi_exit="$?"
  [ "$rofi_exit" -eq 1 ] && exit

  # pressed keybinding is more important than selected entry
  [ "$rofi_exit" -ne 0 ] && option="$rofi_exit"

  case "$option" in
    "") echo "No option chosen." ;;
    10 | "$connected") toggle_connection "$mac" ;;
    11 | "$paired") toggle_paired "$mac" ;;
    "$trusted") toggle_trust "$mac" ;;
    "$goback") show_menu ;;
  esac
}

show_menu() {
  local -a options

  if is_bt_on; then
    local power="Power: on ($kb_restart to restart)"

    local scan="Scan for devices"
    local pairable
    pairable=$(pairable)
    local discoverable
    discoverable=$(discoverable)
    local -a devices
    options=("$power" "$scan" "$pairable" "$discoverable")

    # Human-readable names of devices, one per line
    # If scan is off, will only list paired devices
    devices=$(get_devices)

    # check needed otherwise empty newline will be appended
    [ -n "$devices" ] && options+=("$devices")
  else
    local power="Power: off"
    options=("$power")
  fi

  # variable what will contain string consisting of 'name' and 'mac' of device
  local option
  option=$(printf '%s\n' "${options[@]}" |
    _rofi -kb-accept-custom "" \
      -kb-custom-1 "$kb_restart" \
      -kb-custom-2 "$kb_quick_connect" \
      -kb-custom-3 "$kb_quick_forget")

  case "$?" in
    1) exit ;;
    0)
      case "$option" in
        "$power") toggle_power ;;
        "$scan") enable_scan ;;
        "$discoverable") toggle_discoverable ;;
        "$pairable") toggle_pairable ;;
        *) is_device "$option" && device_menu "$option" ;;
      esac
      ;;
    10) restart_bt ;;
    11)
      if is_device "$option"; then
        mac="$(get_mac "$option")"
        if ! is_paired "$mac"; then
          toggle_paired "$mac"
        else
          toggle_connection "$mac"
        fi
      fi
      ;;
    12) is_device "$option" && toggle_paired "$(get_mac "$option")" ;;
  esac
}

# Rofi command to pipe into, can add any options here
_rofi() { rofi -dmenu -markup-rows -i "$@"; }

show_menu
